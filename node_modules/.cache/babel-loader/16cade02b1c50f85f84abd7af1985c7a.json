{"ast":null,"code":"var _jsxFileName = \"/Users/ethanshealey/Documents/GitHub/WeatherApp/weatherapp/src/Forecast.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: [],\n      location: [],\n      current: [],\n      forecast: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://api.weatherapi.com/v1/forecast.json?key=a60212c2ecf94da9a2101045212705&q=London&days=7&aqi=no&alerts=no\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        data: result,\n        location: result.location,\n        current: result.current,\n        forecast: result.forecast\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      data,\n      location,\n      current,\n      forecast\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [JSON.stringify(location), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 39\n        }, this), JSON.stringify(current), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 38\n        }, this), JSON.stringify(forecast)]\n      }, void 0, true);\n    }\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/ethanshealey/Documents/GitHub/WeatherApp/weatherapp/src/Forecast.js"],"names":["React","ReactDOM","Forecast","Component","constructor","props","state","error","isLoaded","data","location","current","forecast","componentDidMount","fetch","then","res","json","result","setState","render","message","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;;;AAEA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,IAAI,EAAE,EAHK;AAIXC,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,OAAO,EAAE,EALE;AAMXC,MAAAA,QAAQ,EAAE;AANC,KAAb;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,gHAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,IAAI,EAAES,MAFM;AAGZR,QAAAA,QAAQ,EAAEQ,MAAM,CAACR,QAHL;AAIZC,QAAAA,OAAO,EAAEO,MAAM,CAACP,OAJJ;AAKZC,QAAAA,QAAQ,EAAEM,MAAM,CAACN;AALL,OAAd;AAOD,KAXL,EAYI;AACA;AACA;AACCL,IAAAA,KAAD,IAAW;AACT,WAAKY,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KApBL;AAsBD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEb,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,IAAnB;AAAyBC,MAAAA,QAAzB;AAAmCC,MAAAA,OAAnC;AAA4CC,MAAAA;AAA5C,QAAyD,KAAKN,KAApE;;AACA,QAAIC,KAAJ,EAAW;AACT,0BAAO;AAAA,8BAAaA,KAAK,CAACc,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAACb,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAA,mBAEGc,IAAI,CAACC,SAAL,CAAeb,QAAf,CAFH,eAE4B;AAAA;AAAA;AAAA;AAAA,gBAF5B,EAGGY,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAHH,eAG2B;AAAA;AAAA;AAAA;AAAA,gBAH3B,EAIGW,IAAI,CAACC,SAAL,CAAeX,QAAf,CAJH;AAAA,sBADF;AAQD;AACF;;AAtDkC;;AAyDrC,eAAeV,QAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';   \n\nclass Forecast extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        data: [],\n        location: [],\n        current: [],\n        forecast: []\n      };\n    }\n  \n    componentDidMount() {\n      fetch(\"http://api.weatherapi.com/v1/forecast.json?key=a60212c2ecf94da9a2101045212705&q=London&days=7&aqi=no&alerts=no\")\n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              data: result,\n              location: result.location,\n              current: result.current,\n              forecast: result.forecast\n            });\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n  \n    render() {\n      const { error, isLoaded, data, location, current, forecast } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <>\n            \n            {JSON.stringify(location)}<br/>\n            {JSON.stringify(current)}<br/>\n            {JSON.stringify(forecast)}\n          </>\n        );\n      }\n    }\n  }\n\n  export default Forecast;"]},"metadata":{},"sourceType":"module"}